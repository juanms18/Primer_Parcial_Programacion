/*
 * Array_Producto.c
 *
 *  Created on: 14 may. 2022
 *      Author: Juan
 */
#include "Array_Poducto.h"



void hardcodeoProductos(Producto* listaProductos, int len)
{
   listaProductos[0].idProducto = 100;
   listaProductos[1].idProducto = 101;
   listaProductos[2].idProducto = 102;
   listaProductos[3].idProducto = 103;
   listaProductos[4].idProducto = 104;
   listaProductos[5].idProducto = 105;
   listaProductos[6].idProducto = 106;
   listaProductos[7].idProducto = 107;
   listaProductos[8].idProducto = 108;
   listaProductos[9].idProducto = 109;

   listaProductos[0].isEmpty = FULL;
   listaProductos[1].isEmpty = FULL;
   listaProductos[2].isEmpty = FULL;
   listaProductos[3].isEmpty = FULL;
   listaProductos[4].isEmpty = FULL;
   listaProductos[5].isEmpty = FULL;
   listaProductos[6].isEmpty = FULL;
   listaProductos[7].isEmpty = FULL;
   listaProductos[8].isEmpty = FULL;
   listaProductos[9].isEmpty = FULL;

   listaProductos[0].idUsuario = 1003;
   listaProductos[1].idUsuario = 1004;
   listaProductos[2].idUsuario = 1001;
   listaProductos[3].idUsuario = 1003;
   listaProductos[4].idUsuario = 1002;
   listaProductos[5].idUsuario = 1005;
   listaProductos[6].idUsuario = 1005;
   listaProductos[7].idUsuario = 1005;
   listaProductos[8].idUsuario = 1007;
   listaProductos[9].idUsuario = 1001;

   strcpy(listaProductos[0].nombreProducto , "CAFETERA");
   strcpy(listaProductos[1].nombreProducto , "LICUADORA");
   strcpy(listaProductos[2].nombreProducto , "NOKIA 1100");
   strcpy(listaProductos[3].nombreProducto , "TV LED 40");
   strcpy(listaProductos[4].nombreProducto , "BATIDORA");
   strcpy(listaProductos[5].nombreProducto , "TV LED 32");
   strcpy(listaProductos[6].nombreProducto , "SAMSUNG S22");
   strcpy(listaProductos[7].nombreProducto , "MONITOR 22");
   strcpy(listaProductos[8].nombreProducto , "MOTO G 60");
   strcpy(listaProductos[9].nombreProducto , "AURICULARES");

   listaProductos[0].precio = 2542.25 ;
   listaProductos[1].precio = 1356.40;
   listaProductos[2].precio =  1200;
   listaProductos[3].precio = 8501.32;
   listaProductos[4].precio = 5300.65;
   listaProductos[5].precio = 7400;
   listaProductos[6].precio = 9809.99;
   listaProductos[7].precio = 3500;
   listaProductos[8].precio = 9900;
   listaProductos[9].precio = 1000;

   listaProductos[0].categoria = ELECTRODOMESTICOS ;
   listaProductos[1].categoria = ELECTRODOMESTICOS;
   listaProductos[2].categoria = CELULARES;
   listaProductos[3].categoria = ELECTRONICA;
   listaProductos[4].categoria = ELECTRODOMESTICOS;
   listaProductos[5].categoria = ELECTRONICA;
   listaProductos[6].categoria = CELULARES;
   listaProductos[7].categoria = ELECTRONICA;
   listaProductos[8].categoria = CELULARES;
   listaProductos[9].categoria = AUDIO;

   listaProductos[0].stock = 10;
   listaProductos[1].stock = 15;
   listaProductos[2].stock = 12;
   listaProductos[3].stock = 4;
   listaProductos[4].stock = 15;
   listaProductos[5].stock = 8;
   listaProductos[6].stock = 120;
   listaProductos[7].stock = 132;
   listaProductos[8].stock = 12;
   listaProductos[9].stock = 300;

}

int initProductos( Producto* listaProductos,int len)
{
   	int retorno = -1;
    int i;

   	if(listaProductos != NULL && len > 0)
   	{
   	 retorno=0;
	 for ( i = 0; i < len; i++)
	    {
	     listaProductos[i].isEmpty = EMPTY;
	    }
   	}
	return retorno;
}


void mostrarProducto(Producto listaProductos)
{
	char categoria [20];
	remplazoCategoriaAStr(listaProductos.categoria, categoria);
	printf("%d\t\t%s\t\t%.2f\t\t%s\t%d\n",listaProductos.idProducto  , listaProductos.nombreProducto, listaProductos.precio,categoria , listaProductos.stock);
}

int printPrductos(Producto *list, int len)
{
	int retorno = -1;
	puts("**********************************************************************************************************************\n");
	puts("*******************************************LISTADO DE PRODUCTOS*******************************************************\n");
	puts("**********************************************************************************************************************\n");
	puts ("|ID|\t\t|NOMBRE DEL PRODUCTO|\t|PRECIO|\t|CATEGORIA|\t\t|STOCK|\t\n");

	if(list != NULL && len > 0){
		for (int i = 0; i < len; i++)
		{
			if (list[i].isEmpty == FULL)
			{
				mostrarProducto(list[i]);

				retorno = 0;
			}
		}
	}
	system("pause");
	return retorno;
}

int printPrductosPorCategoria(Producto *list, int len)
{
	int retorno = -1;
	puts("**********************************************************************************************************************\n");
	puts("*******************************************LISTADO DE PRODUCTOS*******************************************************\n");
	puts("**********************************************************************************************************************\n");
	puts ("|ID|\t\t|NOMBRE DEL PRODUCTO|\t|PRECIO|\t  |CATEGORIA|\t\t|STOCK|\t\n");

	if(list != NULL && len > 0){
		for (int i = 0; i < len; i++)
		{
			if (list[i].isEmpty == FULL)
			{
				ordenarPorCategoria(list, len);
				mostrarProducto(list[i]);

				retorno = 0;
			}
		}
	}

	return retorno;
}


void ordenarPorCategoria(Producto *list, int len)
{
	int j;
	int estaOrdenado;
	int i;
	if (list != NULL && len > 0){
		do
		{
			estaOrdenado=0;
			j=0;
			for(i=0; i<len; i++)
			{
				if(list[i].isEmpty==FULL)
				{
					for(j=i+1; j<len; j++)
					{
						if(list[j].isEmpty==FULL)
						{

							if(list[i].categoria < list[j].categoria)
							{
								estaOrdenado=1;
								remplazaOrden(list, i, j);
								break;
							}
							else
							{
								if(list[i].categoria < list[j].categoria)
								{
									estaOrdenado=1;
									remplazaOrden(list, i, j);
									break;
								}
							}

						}
					}
				}
			}
			len--;
		}while (estaOrdenado==1);
	}
}



void remplazaOrden(Producto* list , int posicionA , int posicionB)
{
	Producto auxilarProducto;
	auxilarProducto = list[posicionA];
	list[posicionA]=list[posicionB];
	list[posicionB]=auxilarProducto;
}

void remplazoCategoriaAStr(int valor , char * array)

{
	if(valor==ELECTRODOMESTICOS)
	{
		strcpy(array,"ELECTRODOMESTICOS");

	}

	if(valor==ELECTRONICA)
	{
		strcpy(array,"ELECTRONICA       ");
	}

	if(valor==CELULARES)
	{
		strcpy(array,"CELULARES          ");
	}
	if(valor==AUDIO)
	{
		strcpy(array,"AUDIO              ");
	}


}


int lecturaMenuUsuario(Producto * list , int len )
{
	int opcionUsuario;
	if (list != NULL && len > 0)
	{
		do

		{
			menuUsuario(&opcionUsuario);
			switch (opcionUsuario)
			{
			case 1 :
				comprar(list, len);
				break;
			case 2 :
				break;
			case 3 :
				break;
			case 4 :
				break;

			}
		}while(opcionUsuario!=0);
	}
}


void comprar(Producto * list , int len )
{
	int llamadoID;
	int cantidadComprada;
	int validarCompra;

	printPrductosPorCategoria(list, len);
    llamadoID=buscarPorID(list, len);
    if(llamadoID==-1)
    {
    	puts("El ID no EXISTE");
    }
    if(llamadoID==-2)
    {
    	puts("El ID dado de BAJA");
    }
    if(llamadoID!=-1 && llamadoID!=-2)
    {
      validarCompra=validarCantidadComprada(llamadoID, list, len );
      {
    	  if(validarCompra==1)
    	  {
            puts("La compra fue generada correctamente!!");
    	  }
      }

    }

}

int buscarPorID(Producto * list , int len)
{
	int retorno=-1;
	int idSeleccionado;
	int i;
	if (list != NULL && len > 0)
	{
		getInt(&idSeleccionado, "Seleccione el ID del producto deseado\n", "ERROR!! Dato ingresado desconocido!\n",100, 10000, 3);

		for (i = 0; i < len; i++)
		{
			if (list[i].idProducto == idSeleccionado && list[i].isEmpty == FULL)
			{
				retorno=i;
				break;
			}
			if(list[i].idProducto == idSeleccionado && list[i].isEmpty == BAJA)
			{
				retorno=-2;
				break;
			}
		}

	}
	return retorno;
}

int validarCantidadComprada(int indice , Producto * list , int len, Usuario * listaUsuario , int lenUsuario)
{
  	int retorno=0;
  	int cantidadSolicitada;
  	float precioTotal;
  	int cantKM;
	if (list != NULL && len > 0)
	{
		getInt(&cantidadSolicitada, "Ingresae la cantidad de productos que desea comprar.\n", "ERROR! Dato ingresado no valido!\n", 1, 100, 3);
		if(cantidadSolicitada>list[indice].stock)
		{
			printf("ERROR! El stock actual del producto es:%d\n",list[indice].stock);
			system("pause");
			getInt(&cantidadSolicitada, "Ingresae la cantidad de productos que desea comprar.\n", "ERROR! Dato ingresado no valido!\n", 1, 100, 3);
		}
		if(cantidadSolicitada<list[indice].stock)
		{
			precioTotal = cantidadSolicitada*list[indice].precio;
			list[indice].stock = list[indice].stock - cantidadSolicitada;
			printf("El precio total a abonar es:%.2f\n" , precioTotal);
			retorno=1;
			 //altaTracking(listaTrackin, lenTracking, list[indice].idProducto, list[indice].idUsuario , cantidadSolicitada ,cantKM);

		}
		if(cantidadSolicitada==list[indice].stock) // da de baja el produco 0 stock
		{
			precioTotal = cantidadSolicitada*list[indice].precio;
			list[indice].stock = list[indice].stock - cantidadSolicitada;
			list[indice].isEmpty = BAJA;
			printf("El precio total a abonar es:%.2f\n" , precioTotal);
			retorno=1;

			//altaTracking(listaTrackin, lenTracking, list[indice].idProducto, list[indice].idUsuario , cantidadSolicitada , km);

		}

	}
	return retorno;
}


int BuscarPrimerEspacioLibreProducto (Producto *list,int len)
{
	  int i;
	  int retorno;

	  retorno = -1;

	  if(list != NULL && len > 0)
	  {
	  for (i = 0; i < len; i++)
	    {
		 if (list[i].isEmpty == EMPTY)
		{
		  retorno = i;
		  break;
		}
	    }
	  }
	  return retorno;
}

